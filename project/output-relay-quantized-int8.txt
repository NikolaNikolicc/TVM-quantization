def @main(%input0: Tensor[(1, 3, 224, 224), float32] /* ty=Tensor[(1, 3, 224, 224), float32] span=aten::_convolution_0.input0:0:0 */) -> Tensor[(1, 1000), float32] {
  %0 = nn.conv2d(%input0, meta[relay.Constant][0] /* ty=Tensor[(64, 3, 7, 7), float32] */, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] span=aten::_convolution_0:0:0 */;
  %1 = annotation.stop_fusion(%0) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %2 = multiply(%1, meta[relay.Constant][1] /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %3 = add(%2, meta[relay.Constant][2] /* ty=Tensor[(64, 1, 1), float32] */) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %4 = nn.relu(%3) /* ty=Tensor[(1, 64, 112, 112), float32] span=aten::relu__0:0:0 */;
  %5 = nn.max_pool2d(%4, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] span=aten::max_pool2d_0:0:0 */;
  %6 = annotation.stop_fusion(%5) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %7 = multiply(%6, 16f /* ty=float32 */) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %8 = round(%7) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %9 = clip(%8, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %10 = cast(%9, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %11 = nn.conv2d(%10, meta[relay.Constant][3] /* ty=Tensor[(64, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %12 = add(%11, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %13 = right_shift(%12, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %14 = clip(%13, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %15 = cast(%14, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %16 = annotation.stop_fusion(%15) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %17 = cast(%16, dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %18 = multiply(%17, meta[relay.Constant][4] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %19 = add(%18, meta[relay.Constant][5] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %20 = nn.relu(%19) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %21 = add(%20, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %22 = right_shift(%21, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %23 = clip(%22, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %24 = cast(%23, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %25 = annotation.stop_fusion(%24) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %26 = nn.conv2d(%25, meta[relay.Constant][6] /* ty=Tensor[(64, 64, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %27 = add(%26, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %28 = right_shift(%27, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %29 = clip(%28, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %30 = cast(%29, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %31 = annotation.stop_fusion(%30) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %32 = cast(%31, dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %33 = multiply(%32, meta[relay.Constant][7] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %34 = add(%33, meta[relay.Constant][8] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %35 = nn.relu(%34) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %36 = add(%35, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %37 = right_shift(%36, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %38 = clip(%37, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %39 = cast(%38, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %40 = annotation.stop_fusion(%39) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %41 = nn.conv2d(%40, meta[relay.Constant][9] /* ty=Tensor[(256, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %42 = add(%41, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %43 = right_shift(%42, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %44 = clip(%43, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %45 = cast(%44, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %46 = annotation.stop_fusion(%45) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %47 = cast(%46, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %48 = multiply(%47, meta[relay.Constant][10] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %49 = add(%48, meta[relay.Constant][11] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %50 = add(%49, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %51 = right_shift(%50, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %52 = clip(%51, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %53 = cast(%52, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %54 = annotation.stop_fusion(%53) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %55 = annotation.stop_fusion(%5) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %56 = multiply(%55, 16f /* ty=float32 */) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %57 = round(%56) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %58 = clip(%57, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %59 = cast(%58, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %60 = nn.conv2d(%59, meta[relay.Constant][12] /* ty=Tensor[(256, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %61 = add(%60, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %62 = right_shift(%61, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %63 = clip(%62, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %64 = cast(%63, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %65 = annotation.stop_fusion(%64) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %66 = cast(%65, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %67 = multiply(%66, meta[relay.Constant][13] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %68 = add(%67, meta[relay.Constant][14] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %69 = add(%68, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %70 = right_shift(%69, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %71 = clip(%70, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %72 = cast(%71, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %73 = annotation.stop_fusion(%72) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %74 = cast(%54, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %75 = cast(%73, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %76 = add(%74, %75) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %77 = nn.relu(%76) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %78 = clip(%77, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %79 = cast(%78, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %80 = annotation.stop_fusion(%79) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %81 = nn.conv2d(%80, meta[relay.Constant][15] /* ty=Tensor[(64, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %82 = add(%81, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %83 = right_shift(%82, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %84 = clip(%83, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %85 = cast(%84, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %86 = annotation.stop_fusion(%85) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %87 = cast(%86, dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %88 = multiply(%87, meta[relay.Constant][16] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %89 = add(%88, meta[relay.Constant][17] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %90 = nn.relu(%89) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %91 = add(%90, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %92 = right_shift(%91, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %93 = clip(%92, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %94 = cast(%93, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %95 = annotation.stop_fusion(%94) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %96 = nn.conv2d(%95, meta[relay.Constant][18] /* ty=Tensor[(64, 64, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %97 = add(%96, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %98 = right_shift(%97, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %99 = clip(%98, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %100 = cast(%99, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %101 = annotation.stop_fusion(%100) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %102 = cast(%101, dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %103 = multiply(%102, meta[relay.Constant][19] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %104 = add(%103, meta[relay.Constant][20] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %105 = nn.relu(%104) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %106 = add(%105, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %107 = right_shift(%106, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %108 = clip(%107, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %109 = cast(%108, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %110 = annotation.stop_fusion(%109) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %111 = nn.conv2d(%110, meta[relay.Constant][21] /* ty=Tensor[(256, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %112 = add(%111, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %113 = right_shift(%112, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %114 = clip(%113, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %115 = cast(%114, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %116 = annotation.stop_fusion(%115) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %117 = cast(%116, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %118 = multiply(%117, meta[relay.Constant][22] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %119 = add(%118, meta[relay.Constant][23] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %120 = add(%119, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %121 = right_shift(%120, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %122 = clip(%121, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %123 = cast(%122, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %124 = annotation.stop_fusion(%123) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %125 = cast(%78, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %126 = annotation.stop_fusion(%125) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %127 = cast(%124, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %128 = cast(%126, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %129 = add(%127, %128) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %130 = nn.relu(%129) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %131 = clip(%130, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %132 = cast(%131, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %133 = annotation.stop_fusion(%132) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %134 = nn.conv2d(%133, meta[relay.Constant][24] /* ty=Tensor[(64, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %135 = add(%134, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %136 = right_shift(%135, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %137 = clip(%136, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %138 = cast(%137, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %139 = annotation.stop_fusion(%138) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %140 = cast(%139, dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %141 = multiply(%140, meta[relay.Constant][25] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %142 = add(%141, meta[relay.Constant][26] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %143 = nn.relu(%142) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %144 = add(%143, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %145 = right_shift(%144, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %146 = clip(%145, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %147 = cast(%146, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %148 = annotation.stop_fusion(%147) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %149 = nn.conv2d(%148, meta[relay.Constant][27] /* ty=Tensor[(64, 64, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %150 = add(%149, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %151 = right_shift(%150, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %152 = clip(%151, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %153 = cast(%152, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %154 = annotation.stop_fusion(%153) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %155 = cast(%154, dtype="int16") /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %156 = multiply(%155, meta[relay.Constant][28] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %157 = add(%156, meta[relay.Constant][29] /* ty=Tensor[(64, 1, 1), int16] */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %158 = nn.relu(%157) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %159 = add(%158, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %160 = right_shift(%159, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %161 = clip(%160, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 64, 56, 56), int16] */;
  %162 = cast(%161, dtype="int8") /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %163 = annotation.stop_fusion(%162) /* ty=Tensor[(1, 64, 56, 56), int8] */;
  %164 = nn.conv2d(%163, meta[relay.Constant][30] /* ty=Tensor[(256, 64, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %165 = add(%164, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %166 = right_shift(%165, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %167 = clip(%166, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %168 = cast(%167, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %169 = annotation.stop_fusion(%168) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %170 = cast(%169, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %171 = multiply(%170, meta[relay.Constant][31] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %172 = add(%171, meta[relay.Constant][32] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %173 = add(%172, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %174 = right_shift(%173, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %175 = clip(%174, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %176 = cast(%175, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %177 = annotation.stop_fusion(%176) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %178 = cast(%131, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %179 = annotation.stop_fusion(%178) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %180 = cast(%177, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %181 = cast(%179, dtype="int16") /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %182 = add(%180, %181) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %183 = nn.relu(%182) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %184 = clip(%183, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 56, 56), int16] */;
  %185 = cast(%184, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %186 = annotation.stop_fusion(%185) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %187 = nn.conv2d(%186, meta[relay.Constant][33] /* ty=Tensor[(128, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %188 = add(%187, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %189 = right_shift(%188, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %190 = clip(%189, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %191 = cast(%190, dtype="int8") /* ty=Tensor[(1, 128, 56, 56), int8] */;
  %192 = annotation.stop_fusion(%191) /* ty=Tensor[(1, 128, 56, 56), int8] */;
  %193 = cast(%192, dtype="int16") /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %194 = multiply(%193, meta[relay.Constant][34] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %195 = add(%194, meta[relay.Constant][35] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %196 = nn.relu(%195) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %197 = add(%196, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %198 = right_shift(%197, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %199 = clip(%198, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 56, 56), int16] */;
  %200 = cast(%199, dtype="int8") /* ty=Tensor[(1, 128, 56, 56), int8] */;
  %201 = annotation.stop_fusion(%200) /* ty=Tensor[(1, 128, 56, 56), int8] */;
  %202 = nn.conv2d(%201, meta[relay.Constant][36] /* ty=Tensor[(128, 128, 3, 3), int8] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %203 = add(%202, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %204 = right_shift(%203, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %205 = clip(%204, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %206 = cast(%205, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %207 = annotation.stop_fusion(%206) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %208 = cast(%207, dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %209 = multiply(%208, meta[relay.Constant][37] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %210 = add(%209, meta[relay.Constant][38] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %211 = nn.relu(%210) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %212 = add(%211, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %213 = right_shift(%212, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %214 = clip(%213, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %215 = cast(%214, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %216 = annotation.stop_fusion(%215) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %217 = nn.conv2d(%216, meta[relay.Constant][39] /* ty=Tensor[(512, 128, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %218 = add(%217, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %219 = right_shift(%218, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %220 = clip(%219, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %221 = cast(%220, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %222 = annotation.stop_fusion(%221) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %223 = cast(%222, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %224 = multiply(%223, meta[relay.Constant][40] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %225 = add(%224, meta[relay.Constant][41] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %226 = add(%225, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %227 = right_shift(%226, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %228 = clip(%227, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %229 = cast(%228, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %230 = annotation.stop_fusion(%229) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %231 = cast(%184, dtype="int8") /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %232 = annotation.stop_fusion(%231) /* ty=Tensor[(1, 256, 56, 56), int8] */;
  %233 = nn.conv2d(%232, meta[relay.Constant][42] /* ty=Tensor[(512, 256, 1, 1), int8] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %234 = add(%233, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %235 = right_shift(%234, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %236 = clip(%235, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %237 = cast(%236, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %238 = annotation.stop_fusion(%237) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %239 = cast(%238, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %240 = multiply(%239, meta[relay.Constant][43] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %241 = add(%240, meta[relay.Constant][44] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %242 = add(%241, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %243 = right_shift(%242, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %244 = clip(%243, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %245 = cast(%244, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %246 = annotation.stop_fusion(%245) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %247 = cast(%230, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %248 = cast(%246, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %249 = add(%247, %248) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %250 = nn.relu(%249) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %251 = clip(%250, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %252 = cast(%251, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %253 = annotation.stop_fusion(%252) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %254 = nn.conv2d(%253, meta[relay.Constant][45] /* ty=Tensor[(128, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %255 = add(%254, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %256 = right_shift(%255, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %257 = clip(%256, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %258 = cast(%257, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %259 = annotation.stop_fusion(%258) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %260 = cast(%259, dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %261 = multiply(%260, meta[relay.Constant][46] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %262 = add(%261, meta[relay.Constant][47] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %263 = nn.relu(%262) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %264 = add(%263, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %265 = right_shift(%264, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %266 = clip(%265, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %267 = cast(%266, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %268 = annotation.stop_fusion(%267) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %269 = nn.conv2d(%268, meta[relay.Constant][48] /* ty=Tensor[(128, 128, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %270 = add(%269, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %271 = right_shift(%270, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %272 = clip(%271, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %273 = cast(%272, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %274 = annotation.stop_fusion(%273) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %275 = cast(%274, dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %276 = multiply(%275, meta[relay.Constant][49] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %277 = add(%276, meta[relay.Constant][50] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %278 = nn.relu(%277) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %279 = add(%278, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %280 = right_shift(%279, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %281 = clip(%280, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %282 = cast(%281, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %283 = annotation.stop_fusion(%282) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %284 = nn.conv2d(%283, meta[relay.Constant][51] /* ty=Tensor[(512, 128, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %285 = add(%284, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %286 = right_shift(%285, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %287 = clip(%286, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %288 = cast(%287, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %289 = annotation.stop_fusion(%288) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %290 = cast(%289, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %291 = multiply(%290, meta[relay.Constant][52] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %292 = add(%291, meta[relay.Constant][53] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %293 = add(%292, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %294 = right_shift(%293, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %295 = clip(%294, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %296 = cast(%295, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %297 = annotation.stop_fusion(%296) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %298 = cast(%251, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %299 = annotation.stop_fusion(%298) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %300 = cast(%297, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %301 = cast(%299, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %302 = add(%300, %301) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %303 = nn.relu(%302) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %304 = clip(%303, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %305 = cast(%304, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %306 = annotation.stop_fusion(%305) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %307 = nn.conv2d(%306, meta[relay.Constant][54] /* ty=Tensor[(128, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %308 = add(%307, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %309 = right_shift(%308, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %310 = clip(%309, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %311 = cast(%310, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %312 = annotation.stop_fusion(%311) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %313 = cast(%312, dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %314 = multiply(%313, meta[relay.Constant][55] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %315 = add(%314, meta[relay.Constant][56] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %316 = nn.relu(%315) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %317 = add(%316, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %318 = right_shift(%317, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %319 = clip(%318, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %320 = cast(%319, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %321 = annotation.stop_fusion(%320) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %322 = nn.conv2d(%321, meta[relay.Constant][57] /* ty=Tensor[(128, 128, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %323 = add(%322, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %324 = right_shift(%323, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %325 = clip(%324, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %326 = cast(%325, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %327 = annotation.stop_fusion(%326) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %328 = cast(%327, dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %329 = multiply(%328, meta[relay.Constant][58] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %330 = add(%329, meta[relay.Constant][59] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %331 = nn.relu(%330) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %332 = add(%331, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %333 = right_shift(%332, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %334 = clip(%333, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %335 = cast(%334, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %336 = annotation.stop_fusion(%335) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %337 = nn.conv2d(%336, meta[relay.Constant][60] /* ty=Tensor[(512, 128, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %338 = add(%337, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %339 = right_shift(%338, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %340 = clip(%339, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %341 = cast(%340, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %342 = annotation.stop_fusion(%341) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %343 = cast(%342, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %344 = multiply(%343, meta[relay.Constant][61] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %345 = add(%344, meta[relay.Constant][62] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %346 = add(%345, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %347 = right_shift(%346, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %348 = clip(%347, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %349 = cast(%348, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %350 = annotation.stop_fusion(%349) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %351 = cast(%304, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %352 = annotation.stop_fusion(%351) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %353 = cast(%350, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %354 = cast(%352, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %355 = add(%353, %354) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %356 = nn.relu(%355) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %357 = clip(%356, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %358 = cast(%357, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %359 = annotation.stop_fusion(%358) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %360 = nn.conv2d(%359, meta[relay.Constant][63] /* ty=Tensor[(128, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %361 = add(%360, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %362 = right_shift(%361, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %363 = clip(%362, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %364 = cast(%363, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %365 = annotation.stop_fusion(%364) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %366 = cast(%365, dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %367 = multiply(%366, meta[relay.Constant][64] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %368 = add(%367, meta[relay.Constant][65] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %369 = nn.relu(%368) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %370 = add(%369, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %371 = right_shift(%370, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %372 = clip(%371, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %373 = cast(%372, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %374 = annotation.stop_fusion(%373) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %375 = nn.conv2d(%374, meta[relay.Constant][66] /* ty=Tensor[(128, 128, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %376 = add(%375, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %377 = right_shift(%376, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %378 = clip(%377, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %379 = cast(%378, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %380 = annotation.stop_fusion(%379) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %381 = cast(%380, dtype="int16") /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %382 = multiply(%381, meta[relay.Constant][67] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %383 = add(%382, meta[relay.Constant][68] /* ty=Tensor[(128, 1, 1), int16] */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %384 = nn.relu(%383) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %385 = add(%384, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %386 = right_shift(%385, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %387 = clip(%386, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 128, 28, 28), int16] */;
  %388 = cast(%387, dtype="int8") /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %389 = annotation.stop_fusion(%388) /* ty=Tensor[(1, 128, 28, 28), int8] */;
  %390 = nn.conv2d(%389, meta[relay.Constant][69] /* ty=Tensor[(512, 128, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %391 = add(%390, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %392 = right_shift(%391, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %393 = clip(%392, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %394 = cast(%393, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %395 = annotation.stop_fusion(%394) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %396 = cast(%395, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %397 = multiply(%396, meta[relay.Constant][70] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %398 = add(%397, meta[relay.Constant][71] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %399 = add(%398, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %400 = right_shift(%399, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %401 = clip(%400, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %402 = cast(%401, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %403 = annotation.stop_fusion(%402) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %404 = cast(%357, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %405 = annotation.stop_fusion(%404) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %406 = cast(%403, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %407 = cast(%405, dtype="int16") /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %408 = add(%406, %407) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %409 = nn.relu(%408) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %410 = clip(%409, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 28, 28), int16] */;
  %411 = cast(%410, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %412 = annotation.stop_fusion(%411) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %413 = nn.conv2d(%412, meta[relay.Constant][72] /* ty=Tensor[(256, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %414 = add(%413, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %415 = right_shift(%414, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %416 = clip(%415, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %417 = cast(%416, dtype="int8") /* ty=Tensor[(1, 256, 28, 28), int8] */;
  %418 = annotation.stop_fusion(%417) /* ty=Tensor[(1, 256, 28, 28), int8] */;
  %419 = cast(%418, dtype="int16") /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %420 = multiply(%419, meta[relay.Constant][73] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %421 = add(%420, meta[relay.Constant][74] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %422 = nn.relu(%421) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %423 = add(%422, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %424 = right_shift(%423, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %425 = clip(%424, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 28, 28), int16] */;
  %426 = cast(%425, dtype="int8") /* ty=Tensor[(1, 256, 28, 28), int8] */;
  %427 = annotation.stop_fusion(%426) /* ty=Tensor[(1, 256, 28, 28), int8] */;
  %428 = nn.conv2d(%427, meta[relay.Constant][75] /* ty=Tensor[(256, 256, 3, 3), int8] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %429 = add(%428, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %430 = right_shift(%429, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %431 = clip(%430, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %432 = cast(%431, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %433 = annotation.stop_fusion(%432) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %434 = cast(%433, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %435 = multiply(%434, meta[relay.Constant][76] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %436 = add(%435, meta[relay.Constant][77] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %437 = nn.relu(%436) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %438 = add(%437, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %439 = right_shift(%438, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %440 = clip(%439, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %441 = cast(%440, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %442 = annotation.stop_fusion(%441) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %443 = nn.conv2d(%442, meta[relay.Constant][78] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %444 = add(%443, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %445 = right_shift(%444, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %446 = clip(%445, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %447 = cast(%446, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %448 = annotation.stop_fusion(%447) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %449 = cast(%448, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %450 = multiply(%449, meta[relay.Constant][79] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %451 = add(%450, meta[relay.Constant][80] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %452 = add(%451, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %453 = right_shift(%452, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %454 = clip(%453, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %455 = cast(%454, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %456 = annotation.stop_fusion(%455) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %457 = cast(%410, dtype="int8") /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %458 = annotation.stop_fusion(%457) /* ty=Tensor[(1, 512, 28, 28), int8] */;
  %459 = nn.conv2d(%458, meta[relay.Constant][81] /* ty=Tensor[(1024, 512, 1, 1), int8] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %460 = add(%459, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %461 = right_shift(%460, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %462 = clip(%461, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %463 = cast(%462, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %464 = annotation.stop_fusion(%463) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %465 = cast(%464, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %466 = multiply(%465, meta[relay.Constant][82] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %467 = add(%466, meta[relay.Constant][83] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %468 = add(%467, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %469 = right_shift(%468, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %470 = clip(%469, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %471 = cast(%470, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %472 = annotation.stop_fusion(%471) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %473 = cast(%456, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %474 = cast(%472, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %475 = add(%473, %474) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %476 = nn.relu(%475) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %477 = clip(%476, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %478 = cast(%477, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %479 = annotation.stop_fusion(%478) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %480 = nn.conv2d(%479, meta[relay.Constant][84] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %481 = add(%480, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %482 = right_shift(%481, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %483 = clip(%482, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %484 = cast(%483, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %485 = annotation.stop_fusion(%484) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %486 = cast(%485, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %487 = multiply(%486, meta[relay.Constant][85] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %488 = add(%487, meta[relay.Constant][86] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %489 = nn.relu(%488) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %490 = add(%489, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %491 = right_shift(%490, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %492 = clip(%491, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %493 = cast(%492, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %494 = annotation.stop_fusion(%493) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %495 = nn.conv2d(%494, meta[relay.Constant][87] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %496 = add(%495, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %497 = right_shift(%496, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %498 = clip(%497, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %499 = cast(%498, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %500 = annotation.stop_fusion(%499) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %501 = cast(%500, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %502 = multiply(%501, meta[relay.Constant][88] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %503 = add(%502, meta[relay.Constant][89] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %504 = nn.relu(%503) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %505 = add(%504, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %506 = right_shift(%505, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %507 = clip(%506, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %508 = cast(%507, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %509 = annotation.stop_fusion(%508) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %510 = nn.conv2d(%509, meta[relay.Constant][90] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %511 = add(%510, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %512 = right_shift(%511, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %513 = clip(%512, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %514 = cast(%513, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %515 = annotation.stop_fusion(%514) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %516 = cast(%515, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %517 = multiply(%516, meta[relay.Constant][91] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %518 = add(%517, meta[relay.Constant][92] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %519 = add(%518, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %520 = right_shift(%519, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %521 = clip(%520, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %522 = cast(%521, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %523 = annotation.stop_fusion(%522) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %524 = cast(%477, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %525 = annotation.stop_fusion(%524) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %526 = cast(%523, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %527 = cast(%525, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %528 = add(%526, %527) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %529 = nn.relu(%528) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %530 = clip(%529, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %531 = cast(%530, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %532 = annotation.stop_fusion(%531) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %533 = nn.conv2d(%532, meta[relay.Constant][93] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %534 = add(%533, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %535 = right_shift(%534, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %536 = clip(%535, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %537 = cast(%536, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %538 = annotation.stop_fusion(%537) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %539 = cast(%538, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %540 = multiply(%539, meta[relay.Constant][94] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %541 = add(%540, meta[relay.Constant][95] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %542 = nn.relu(%541) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %543 = add(%542, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %544 = right_shift(%543, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %545 = clip(%544, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %546 = cast(%545, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %547 = annotation.stop_fusion(%546) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %548 = nn.conv2d(%547, meta[relay.Constant][96] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %549 = add(%548, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %550 = right_shift(%549, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %551 = clip(%550, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %552 = cast(%551, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %553 = annotation.stop_fusion(%552) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %554 = cast(%553, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %555 = multiply(%554, meta[relay.Constant][97] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %556 = add(%555, meta[relay.Constant][98] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %557 = nn.relu(%556) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %558 = add(%557, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %559 = right_shift(%558, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %560 = clip(%559, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %561 = cast(%560, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %562 = annotation.stop_fusion(%561) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %563 = nn.conv2d(%562, meta[relay.Constant][99] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %564 = add(%563, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %565 = right_shift(%564, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %566 = clip(%565, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %567 = cast(%566, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %568 = annotation.stop_fusion(%567) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %569 = cast(%568, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %570 = multiply(%569, meta[relay.Constant][100] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %571 = add(%570, meta[relay.Constant][101] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %572 = add(%571, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %573 = right_shift(%572, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %574 = clip(%573, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %575 = cast(%574, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %576 = annotation.stop_fusion(%575) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %577 = cast(%530, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %578 = annotation.stop_fusion(%577) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %579 = cast(%576, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %580 = cast(%578, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %581 = add(%579, %580) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %582 = nn.relu(%581) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %583 = clip(%582, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %584 = cast(%583, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %585 = annotation.stop_fusion(%584) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %586 = nn.conv2d(%585, meta[relay.Constant][102] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %587 = add(%586, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %588 = right_shift(%587, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %589 = clip(%588, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %590 = cast(%589, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %591 = annotation.stop_fusion(%590) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %592 = cast(%591, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %593 = multiply(%592, meta[relay.Constant][103] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %594 = add(%593, meta[relay.Constant][104] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %595 = nn.relu(%594) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %596 = add(%595, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %597 = right_shift(%596, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %598 = clip(%597, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %599 = cast(%598, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %600 = annotation.stop_fusion(%599) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %601 = nn.conv2d(%600, meta[relay.Constant][105] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %602 = add(%601, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %603 = right_shift(%602, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %604 = clip(%603, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %605 = cast(%604, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %606 = annotation.stop_fusion(%605) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %607 = cast(%606, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %608 = multiply(%607, meta[relay.Constant][106] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %609 = add(%608, meta[relay.Constant][107] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %610 = nn.relu(%609) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %611 = add(%610, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %612 = right_shift(%611, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %613 = clip(%612, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %614 = cast(%613, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %615 = annotation.stop_fusion(%614) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %616 = nn.conv2d(%615, meta[relay.Constant][108] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %617 = add(%616, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %618 = right_shift(%617, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %619 = clip(%618, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %620 = cast(%619, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %621 = annotation.stop_fusion(%620) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %622 = cast(%621, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %623 = multiply(%622, meta[relay.Constant][109] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %624 = add(%623, meta[relay.Constant][110] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %625 = add(%624, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %626 = right_shift(%625, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %627 = clip(%626, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %628 = cast(%627, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %629 = annotation.stop_fusion(%628) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %630 = cast(%583, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %631 = annotation.stop_fusion(%630) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %632 = cast(%629, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %633 = cast(%631, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %634 = add(%632, %633) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %635 = nn.relu(%634) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %636 = clip(%635, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %637 = cast(%636, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %638 = annotation.stop_fusion(%637) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %639 = nn.conv2d(%638, meta[relay.Constant][111] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %640 = add(%639, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %641 = right_shift(%640, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %642 = clip(%641, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %643 = cast(%642, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %644 = annotation.stop_fusion(%643) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %645 = cast(%644, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %646 = multiply(%645, meta[relay.Constant][112] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %647 = add(%646, meta[relay.Constant][113] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %648 = nn.relu(%647) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %649 = add(%648, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %650 = right_shift(%649, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %651 = clip(%650, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %652 = cast(%651, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %653 = annotation.stop_fusion(%652) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %654 = nn.conv2d(%653, meta[relay.Constant][114] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %655 = add(%654, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %656 = right_shift(%655, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %657 = clip(%656, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %658 = cast(%657, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %659 = annotation.stop_fusion(%658) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %660 = cast(%659, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %661 = multiply(%660, meta[relay.Constant][115] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %662 = add(%661, meta[relay.Constant][116] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %663 = nn.relu(%662) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %664 = add(%663, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %665 = right_shift(%664, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %666 = clip(%665, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %667 = cast(%666, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %668 = annotation.stop_fusion(%667) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %669 = nn.conv2d(%668, meta[relay.Constant][117] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %670 = add(%669, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %671 = right_shift(%670, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %672 = clip(%671, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %673 = cast(%672, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %674 = annotation.stop_fusion(%673) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %675 = cast(%674, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %676 = multiply(%675, meta[relay.Constant][118] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %677 = add(%676, meta[relay.Constant][119] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %678 = add(%677, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %679 = right_shift(%678, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %680 = clip(%679, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %681 = cast(%680, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %682 = annotation.stop_fusion(%681) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %683 = cast(%636, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %684 = annotation.stop_fusion(%683) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %685 = cast(%682, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %686 = cast(%684, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %687 = add(%685, %686) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %688 = nn.relu(%687) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %689 = clip(%688, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %690 = cast(%689, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %691 = annotation.stop_fusion(%690) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %692 = nn.conv2d(%691, meta[relay.Constant][120] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %693 = add(%692, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %694 = right_shift(%693, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %695 = clip(%694, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %696 = cast(%695, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %697 = annotation.stop_fusion(%696) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %698 = cast(%697, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %699 = multiply(%698, meta[relay.Constant][121] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %700 = add(%699, meta[relay.Constant][122] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %701 = nn.relu(%700) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %702 = add(%701, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %703 = right_shift(%702, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %704 = clip(%703, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %705 = cast(%704, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %706 = annotation.stop_fusion(%705) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %707 = nn.conv2d(%706, meta[relay.Constant][123] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %708 = add(%707, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %709 = right_shift(%708, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %710 = clip(%709, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %711 = cast(%710, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %712 = annotation.stop_fusion(%711) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %713 = cast(%712, dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %714 = multiply(%713, meta[relay.Constant][124] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %715 = add(%714, meta[relay.Constant][125] /* ty=Tensor[(256, 1, 1), int16] */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %716 = nn.relu(%715) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %717 = add(%716, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %718 = right_shift(%717, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %719 = clip(%718, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %720 = cast(%719, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %721 = annotation.stop_fusion(%720) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %722 = nn.conv2d(%721, meta[relay.Constant][126] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %723 = add(%722, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %724 = right_shift(%723, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %725 = clip(%724, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %726 = cast(%725, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %727 = annotation.stop_fusion(%726) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %728 = cast(%727, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %729 = multiply(%728, meta[relay.Constant][127] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %730 = add(%729, meta[relay.Constant][128] /* ty=Tensor[(1024, 1, 1), int16] */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %731 = add(%730, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %732 = right_shift(%731, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %733 = clip(%732, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %734 = cast(%733, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %735 = annotation.stop_fusion(%734) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %736 = cast(%689, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %737 = annotation.stop_fusion(%736) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %738 = cast(%735, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %739 = cast(%737, dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %740 = add(%738, %739) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %741 = nn.relu(%740) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %742 = clip(%741, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %743 = cast(%742, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %744 = annotation.stop_fusion(%743) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %745 = nn.conv2d(%744, meta[relay.Constant][129] /* ty=Tensor[(512, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %746 = add(%745, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %747 = right_shift(%746, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %748 = clip(%747, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %749 = cast(%748, dtype="int8") /* ty=Tensor[(1, 512, 14, 14), int8] */;
  %750 = annotation.stop_fusion(%749) /* ty=Tensor[(1, 512, 14, 14), int8] */;
  %751 = cast(%750, dtype="int16") /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %752 = multiply(%751, meta[relay.Constant][130] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %753 = add(%752, meta[relay.Constant][131] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %754 = nn.relu(%753) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %755 = add(%754, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %756 = right_shift(%755, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %757 = clip(%756, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %758 = cast(%757, dtype="int8") /* ty=Tensor[(1, 512, 14, 14), int8] */;
  %759 = annotation.stop_fusion(%758) /* ty=Tensor[(1, 512, 14, 14), int8] */;
  %760 = nn.conv2d(%759, meta[relay.Constant][132] /* ty=Tensor[(512, 512, 3, 3), int8] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %761 = add(%760, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %762 = right_shift(%761, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %763 = clip(%762, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %764 = cast(%763, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %765 = annotation.stop_fusion(%764) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %766 = cast(%765, dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %767 = multiply(%766, meta[relay.Constant][133] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %768 = add(%767, meta[relay.Constant][134] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %769 = nn.relu(%768) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %770 = add(%769, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %771 = right_shift(%770, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %772 = clip(%771, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %773 = cast(%772, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %774 = annotation.stop_fusion(%773) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %775 = nn.conv2d(%774, meta[relay.Constant][135] /* ty=Tensor[(2048, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %776 = add(%775, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %777 = right_shift(%776, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %778 = clip(%777, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %779 = cast(%778, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %780 = annotation.stop_fusion(%779) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %781 = cast(%780, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %782 = multiply(%781, meta[relay.Constant][136] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %783 = add(%782, meta[relay.Constant][137] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %784 = add(%783, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %785 = right_shift(%784, 3i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %786 = clip(%785, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %787 = cast(%786, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %788 = annotation.stop_fusion(%787) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %789 = cast(%742, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %790 = annotation.stop_fusion(%789) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %791 = nn.conv2d(%790, meta[relay.Constant][138] /* ty=Tensor[(2048, 1024, 1, 1), int8] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %792 = add(%791, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %793 = right_shift(%792, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %794 = clip(%793, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %795 = cast(%794, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %796 = annotation.stop_fusion(%795) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %797 = cast(%796, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %798 = multiply(%797, meta[relay.Constant][139] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %799 = add(%798, meta[relay.Constant][140] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %800 = add(%799, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %801 = right_shift(%800, 3i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %802 = clip(%801, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %803 = cast(%802, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %804 = annotation.stop_fusion(%803) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %805 = cast(%788, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %806 = cast(%804, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %807 = add(%805, %806) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %808 = nn.relu(%807) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %809 = clip(%808, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %810 = cast(%809, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %811 = annotation.stop_fusion(%810) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %812 = nn.conv2d(%811, meta[relay.Constant][141] /* ty=Tensor[(512, 2048, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %813 = add(%812, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %814 = right_shift(%813, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %815 = clip(%814, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %816 = cast(%815, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %817 = annotation.stop_fusion(%816) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %818 = cast(%817, dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %819 = multiply(%818, meta[relay.Constant][142] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %820 = add(%819, meta[relay.Constant][143] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %821 = nn.relu(%820) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %822 = add(%821, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %823 = right_shift(%822, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %824 = clip(%823, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %825 = cast(%824, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %826 = annotation.stop_fusion(%825) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %827 = nn.conv2d(%826, meta[relay.Constant][144] /* ty=Tensor[(512, 512, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %828 = add(%827, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %829 = right_shift(%828, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %830 = clip(%829, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %831 = cast(%830, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %832 = annotation.stop_fusion(%831) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %833 = cast(%832, dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %834 = multiply(%833, meta[relay.Constant][145] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %835 = add(%834, meta[relay.Constant][146] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %836 = nn.relu(%835) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %837 = add(%836, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %838 = right_shift(%837, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %839 = clip(%838, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %840 = cast(%839, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %841 = annotation.stop_fusion(%840) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %842 = nn.conv2d(%841, meta[relay.Constant][147] /* ty=Tensor[(2048, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %843 = add(%842, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %844 = right_shift(%843, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %845 = clip(%844, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %846 = cast(%845, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %847 = annotation.stop_fusion(%846) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %848 = cast(%847, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %849 = multiply(%848, meta[relay.Constant][148] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %850 = add(%849, meta[relay.Constant][149] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %851 = add(%850, 2i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %852 = right_shift(%851, 2i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %853 = clip(%852, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %854 = cast(%853, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %855 = annotation.stop_fusion(%854) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %856 = cast(%809, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %857 = annotation.stop_fusion(%856) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %858 = cast(%855, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %859 = cast(%857, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %860 = add(%858, %859) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %861 = nn.relu(%860) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %862 = clip(%861, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %863 = cast(%862, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %864 = annotation.stop_fusion(%863) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %865 = nn.conv2d(%864, meta[relay.Constant][150] /* ty=Tensor[(512, 2048, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %866 = add(%865, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %867 = right_shift(%866, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %868 = clip(%867, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %869 = cast(%868, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %870 = annotation.stop_fusion(%869) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %871 = cast(%870, dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %872 = multiply(%871, meta[relay.Constant][151] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %873 = add(%872, meta[relay.Constant][152] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %874 = nn.relu(%873) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %875 = add(%874, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %876 = right_shift(%875, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %877 = clip(%876, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %878 = cast(%877, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %879 = annotation.stop_fusion(%878) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %880 = nn.conv2d(%879, meta[relay.Constant][153] /* ty=Tensor[(512, 512, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %881 = add(%880, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %882 = right_shift(%881, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %883 = clip(%882, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %884 = cast(%883, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %885 = annotation.stop_fusion(%884) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %886 = cast(%885, dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %887 = multiply(%886, meta[relay.Constant][154] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %888 = add(%887, meta[relay.Constant][155] /* ty=Tensor[(512, 1, 1), int16] */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %889 = nn.relu(%888) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %890 = add(%889, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %891 = right_shift(%890, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %892 = clip(%891, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %893 = cast(%892, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %894 = annotation.stop_fusion(%893) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %895 = nn.conv2d(%894, meta[relay.Constant][156] /* ty=Tensor[(2048, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %896 = add(%895, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %897 = right_shift(%896, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %898 = clip(%897, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %899 = cast(%898, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %900 = annotation.stop_fusion(%899) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %901 = cast(%900, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %902 = multiply(%901, meta[relay.Constant][157] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %903 = left_shift(%902, 1i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %904 = add(%903, meta[relay.Constant][158] /* ty=Tensor[(2048, 1, 1), int16] */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %905 = add(%904, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %906 = right_shift(%905, 3i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %907 = clip(%906, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %908 = cast(%907, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %909 = annotation.stop_fusion(%908) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %910 = cast(%862, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %911 = annotation.stop_fusion(%910) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %912 = cast(%909, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %913 = cast(%911, dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %914 = add(%912, %913) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %915 = nn.relu(%914) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %916 = clip(%915, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %917 = cast(%916, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %918 = annotation.stop_fusion(%917) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %919 = cast(%918, dtype="float32") /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %920 = multiply(%919, 0.0625f /* ty=float32 */) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %921 = nn.adaptive_avg_pool2d(%920, output_size=[1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] span=aten::adaptive_avg_pool2d_0:0:0 */;
  %922 = reshape(%921, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] span=aten::flatten_0:0:0 */;
  %923 = squeeze(%922, axis=[2, 3]) /* ty=Tensor[(1, 2048), float32] span=aten::flatten_0:0:0 */;
  %924 = nn.dense(%923, meta[relay.Constant][159] /* ty=Tensor[(1000, 2048), float32] */, units=1000) /* ty=Tensor[(1, 1000), float32] span=aten::addmm_0:0:0 */;
  add(%924, meta[relay.Constant][160] /* ty=Tensor[(1000), float32] */) /* ty=Tensor[(1, 1000), float32] span=aten::addmm_0:0:0 */
}

